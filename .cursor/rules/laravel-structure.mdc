---
description: 
globs: 
alwaysApply: true
---
# Laravel项目结构规范

## 总体结构
项目采用标准Laravel目录结构，并根据实际需求进行了扩展。

## 核心目录

### `app/` - 应用核心代码
- `Http/` - HTTP相关功能
  - `Controllers/` - 控制器
    - `Admin/` - 后台管理控制器
  - `Middleware/` - HTTP中间件
  - `Requests/` - 表单请求验证
    - `Admin/` - 后台管理表单请求
  - `Resources/` - API资源转换器
- `Models/` - Eloquent数据模型
- `Providers/` - 服务提供者
- `Enums/` - 枚举类型
  - `Attributes/` - 枚举属性
  - `Traits/` - 枚举特性

### `resources/` - 前端资源
- `js/` - JavaScript代码
  - `admin/` - 后台管理前端代码
    - `components/` - 后台组件
    - `pages/` - 后台页面
    - `types/` - TypeScript类型定义
    - `utils/` - 工具函数
  - `web/` - 前台用户前端代码
- `views/` - Blade模板

### `routes/` - 路由定义
- `web.php` - 前台路由
- `api.php` - API路由
- `admin/` - 后台路由
  - `index.php` - 后台入口路由

### `database/` - 数据库相关
- `migrations/` - 数据库迁移
- `factories/` - 模型工厂
- `seeders/` - 数据填充

## 其他重要目录
- `config/` - 配置文件
- `storage/` - 上传文件、日志等
- `public/` - 公共访问文件
- `tests/` - 测试文件

## 命名约定

### 文件命名
- **控制器**: `[资源名，复数]Controller.php`，如 `UsersController.php`
- **模型**: `[资源名，单数].php`，如 `User.php`
- **迁移**: `[年月日时分秒]_[操作]_[表名]_table.php`，如 `2023_01_01_000000_create_users_table.php`
- **请求**: `[操作][资源名，单数]Request.php`，如 `StoreUserRequest.php`

### 路由命名
- **前台路由**: `web.[资源名].[操作]`，如 `web.posts.show`
- **API路由**: `api.[资源名].[操作]`，如 `api.users.index`
- **后台路由**: `admin.[资源名].[操作]`，如 `admin.users.edit`

## 代码组织实例

### 典型控制器结构
```
app/Http/Controllers/Admin/UsersController.php
app/Http/Requests/Admin/StoreUserRequest.php
app/Http/Requests/Admin/UpdateUserRequest.php
app/Http/Resources/UserResource.php
```

### 典型前端组织
```
resources/js/admin/pages/Users/Index.vue
resources/js/admin/pages/Users/Edit.vue
resources/js/admin/pages/Users/Create.vue
resources/js/admin/components/UserForm.vue
```

### 典型路由组织
```
routes/admin/users.php
routes/admin/dashboard.php
routes/admin/index.php (汇总所有admin路由)
```

## 最佳实践
- 使用中间件保护后台路由
- 对所有表单请求使用专用Request类
- 将业务逻辑从控制器移到服务层
- 为模型定义清晰的关系和查询作用域
- 使用资源控制器处理CRUD操作
